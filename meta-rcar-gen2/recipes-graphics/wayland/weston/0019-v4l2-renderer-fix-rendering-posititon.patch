From ed79dc4679229d7e23198d5fe98609d2165a4d80 Mon Sep 17 00:00:00 2001
From: Takanari Hayama <taki@igel.co.jp>
Date: Thu, 13 Nov 2014 23:46:22 +0900
Subject: [PATCH 19/22] v4l2-renderer: fix rendering posititon

New algorithm is taken from pixman-renderer.
---
 src/v4l2-renderer.c |  410 +++++++++++++++++++++++++++++++++++++++------------
 1 file changed, 318 insertions(+), 92 deletions(-)

diff --git a/src/v4l2-renderer.c b/src/v4l2-renderer.c
index 0a422ed..11c8c67 100644
--- a/src/v4l2-renderer.c
+++ b/src/v4l2-renderer.c
@@ -356,125 +356,270 @@ v4l2_renderer_read_pixels(struct weston_output *output,
 }
 
 static void
-draw_view(struct weston_view *ev, struct weston_output *output,
-	  pixman_region32_t *damage) /* in global coordinates */
+region_global_to_output(struct weston_output *output, pixman_region32_t *region)
 {
-	struct v4l2_renderer *renderer = (struct v4l2_renderer*)output->compositor->renderer;
-	struct v4l2_surface_state *vs = get_surface_state(ev->surface);
-	struct weston_matrix matrix = ev->transform.matrix;
-	int src_x, src_y;
-	int src_width, src_height;
-	int dst_x, dst_y;
-	int dst_width, dst_height;
-	int t, over;
-	struct weston_vector p1 = {{ 0.0f, 0.0f, 0.0f, 1.0f }};	// left-top
-	struct weston_vector p2 = {{ 0.0f, 0.0f, 0.0f, 1.0f }};	// right-bot
+	pixman_region32_translate(region, -output->x, -output->y);
+	weston_transformed_region(output->width, output->height,
+				  output->transform, output->current_scale,
+				  region, region);
+}
 
-	/*
-	 * Check if the surface is still valid. OpenGL/ES apps may destroy
-	 * buffers before they destroy a surface. This check works in the
-	 * serialized world only.
-	 */
-	if (fcntl(vs->planes[0].dmafd, F_GETFD) < 0)
-		return;
+#define D2F(v) pixman_double_to_fixed((double)v)
 
-	/*
-	 * TODO: We should consider if we make use of 'damage' region.
-	 * In order to do partial update with 'damage', we should
-	 * compose the region with the previous output.
-	 *
-	 * If there are too few views to compose, then there's no
-	 * point that we update only damaged region. This makes
-	 * a point only if there are very few views in the damaged
-	 * region, and many views in the undamaged region.
-	 *
-	 * In the meanwhile, we do full composition as done in
-	 * rpi-renderer.
-	 */
+static void
+transform_apply_viewport(pixman_transform_t *transform,
+			 struct weston_surface *surface)
+{
+	struct weston_buffer_viewport *vp = &surface->buffer_viewport;
+	double src_width, src_height;
+	double src_x, src_y;
+
+	if (vp->buffer.src_width == wl_fixed_from_int(-1)) {
+		if (vp->surface.width == -1)
+			return;
+
+		src_x = 0.0;
+		src_y = 0.0;
+		src_width = surface->width_from_buffer;
+		src_height = surface->height_from_buffer;
+	} else {
+		src_x = wl_fixed_to_double(vp->buffer.src_x);
+		src_y = wl_fixed_to_double(vp->buffer.src_y);
+		src_width = wl_fixed_to_double(vp->buffer.src_width);
+		src_height = wl_fixed_to_double(vp->buffer.src_height);
+	}
 
-	// calculate the destination
-	src_x = 0;
-	src_y = 0;
-	src_width = vs->width;
-	src_height = vs->height;
+	pixman_transform_scale(transform, NULL,
+			       D2F(src_width / surface->width),
+			       D2F(src_height / surface->height));
+	pixman_transform_translate(transform, NULL, D2F(src_x), D2F(src_y));
+}
 
-	//weston_matrix_multiply(&matrix, &output->matrix);
+static void
+repaint_region(struct weston_view *ev, struct weston_output *output,
+	       pixman_region32_t *region, pixman_region32_t *surf_region,
+	       pixman_op_t pixman_op)	// XXX: this needs to be replaced.
+{
+	struct v4l2_renderer *renderer = (struct v4l2_renderer*)output->compositor->renderer;
+	struct v4l2_surface_state *vs = get_surface_state(ev->surface);
+	struct weston_buffer_viewport *vp = &ev->surface->buffer_viewport;
+	pixman_region32_t final_region;
+	float view_x, view_y;
+	pixman_transform_t transform;
+	pixman_fixed_t fw, fh;
+	pixman_box32_t *bbox;
+	pixman_vector_t q1, q2;
+	int src_x, src_y, src_width, src_height;
+	int dst_x, dst_y, dst_width, dst_height;
+
+	/* The final region to be painted is the intersection of
+	 * 'region' and 'surf_region'. However, 'region' is in the global
+	 * coordinates, and 'surf_region' is in the surface-local
+	 * coordinates
+	 */
+	pixman_region32_init(&final_region);
+	if (surf_region) {
+		pixman_region32_copy(&final_region, surf_region);
+
+		/* Convert from surface to global coordinates */
+		if (!ev->transform.enabled) {
+			pixman_region32_translate(&final_region, ev->geometry.x, ev->geometry.y);
+		} else {
+			weston_view_to_global_float(ev, 0, 0, &view_x, &view_y);
+			pixman_region32_translate(&final_region, (int)view_x, (int)view_y);
+		}
 
-	p2.f[0] = src_width;
-	p2.f[1] = src_height;
+		/* We need to paint the intersection */
+		pixman_region32_intersect(&final_region, &final_region, region);
+	} else {
+		/* If there is no surface region, just use the global region */
+		pixman_region32_copy(&final_region, region);
+	}
 
-	DBG("%s: (%f,%f)-(%f,%f) -> ", __func__, p1.f[0], p1.f[1], p2.f[0], p2.f[1]);
+	/* Convert from global to output coord */
+	bbox = pixman_region32_extents(&final_region);
+	DBG("%s: final_region: global:(%d,%d)-(%d,%d)\n", __func__, bbox->x1, bbox->y1, bbox->x2, bbox->y2);
 
-	weston_matrix_transform(&matrix, &p1);
-	weston_matrix_transform(&matrix, &p2);
+	region_global_to_output(output, &final_region);
 
-	DBGC("(%f,%f)-(%f,%f)\n", p1.f[0], p1.f[1], p2.f[0], p2.f[1]);
+	bbox = pixman_region32_extents(&final_region);
+	DBG("%s: final_region: local:(%d,%d)-(%d,%d)\n", __func__, bbox->x1, bbox->y1, bbox->x2, bbox->y2);
 
-	if ((dst_width = round(p2.f[0] - p1.f[0])) == 0)
-		return;
+	/*
+	 * At this point, we should have the destination in final_region.
+	 */
 
-	if ((dst_height = round(p2.f[1] - p1.f[1])) == 0)
-		return;
+	/* Set up the source transformation based on the surface
+	   position, the output position/transform/scale and the client
+	   specified buffer transform/scale */
+	pixman_transform_init_identity(&transform);
+	pixman_transform_scale(&transform, NULL,
+			       pixman_double_to_fixed ((double)1.0/output->current_scale),
+			       pixman_double_to_fixed ((double)1.0/output->current_scale));
+
+	fw = pixman_int_to_fixed(output->width);
+	fh = pixman_int_to_fixed(output->height);
+	switch (output->transform) {
+	default:
+	case WL_OUTPUT_TRANSFORM_NORMAL:
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+		break;
+	case WL_OUTPUT_TRANSFORM_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+		pixman_transform_rotate(&transform, NULL, 0, -pixman_fixed_1);
+		pixman_transform_translate(&transform, NULL, 0, fh);
+		break;
+	case WL_OUTPUT_TRANSFORM_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+		pixman_transform_rotate(&transform, NULL, -pixman_fixed_1, 0);
+		pixman_transform_translate(&transform, NULL, fw, fh);
+		break;
+	case WL_OUTPUT_TRANSFORM_270:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		pixman_transform_rotate(&transform, NULL, 0, pixman_fixed_1);
+		pixman_transform_translate(&transform, NULL, fw, 0);
+		break;
+	}
 
-	if (dst_width < 0) {
-		dst_x = round(p2.f[0]);
-		dst_width = -dst_width;
-	} else {
-		dst_x = round(p1.f[0]);
+	switch (output->transform) {
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		pixman_transform_scale(&transform, NULL,
+				       pixman_int_to_fixed (-1),
+				       pixman_int_to_fixed (1));
+		pixman_transform_translate(&transform, NULL, fw, 0);
+		break;
 	}
 
-	if (dst_height < 0) {
-		dst_y = round(p2.f[1]);
-		dst_height = -dst_height;
+        pixman_transform_translate(&transform, NULL,
+				   pixman_double_to_fixed (output->x),
+				   pixman_double_to_fixed (output->y));
+
+	if (ev->transform.enabled) {
+		/* Pixman supports only 2D transform matrix, but Weston uses 3D,
+		 * so we're omitting Z coordinate here
+		 */
+		pixman_transform_t surface_transform = {{
+				{ D2F(ev->transform.matrix.d[0]),
+				  D2F(ev->transform.matrix.d[4]),
+				  D2F(ev->transform.matrix.d[12]),
+				},
+				{ D2F(ev->transform.matrix.d[1]),
+				  D2F(ev->transform.matrix.d[5]),
+				  D2F(ev->transform.matrix.d[13]),
+				},
+				{ D2F(ev->transform.matrix.d[3]),
+				  D2F(ev->transform.matrix.d[7]),
+				  D2F(ev->transform.matrix.d[15]),
+				}
+			}};
+
+		pixman_transform_invert(&surface_transform, &surface_transform);
+		pixman_transform_multiply (&transform, &surface_transform, &transform);
 	} else {
-		dst_y = round(p1.f[1]);
+		pixman_transform_translate(&transform, NULL,
+					   pixman_double_to_fixed ((double)-ev->geometry.x),
+					   pixman_double_to_fixed ((double)-ev->geometry.y));
 	}
 
-	dst_x -= output->x;
-	dst_y -= output->y;
+	transform_apply_viewport(&transform, ev->surface);
 
-	if (dst_x < 0) {
-		t = (int64_t)dst_x * src_width / dst_width;
-		src_width += t;
-		dst_width += dst_x;
-		src_x -= t;
-		dst_x = 0;
-	}
+	fw = pixman_int_to_fixed(ev->surface->width_from_buffer);
+	fh = pixman_int_to_fixed(ev->surface->height_from_buffer);
 
-	if (dst_width <= 0)
-		return;
+	switch (vp->buffer.transform) {
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		pixman_transform_scale(&transform, NULL,
+				       pixman_int_to_fixed (-1),
+				       pixman_int_to_fixed (1));
+		pixman_transform_translate(&transform, NULL, fw, 0);
+		break;
+	}
 
-	if (dst_y < 0) {
-		t = (int64_t)dst_y * src_height / dst_height;
-		src_height += t;
-		dst_height += dst_y;
-		src_y -= t;
-		dst_y = 0;
+	switch (vp->buffer.transform) {
+	default:
+	case WL_OUTPUT_TRANSFORM_NORMAL:
+	case WL_OUTPUT_TRANSFORM_FLIPPED:
+		break;
+	case WL_OUTPUT_TRANSFORM_90:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_90:
+		pixman_transform_rotate(&transform, NULL, 0, pixman_fixed_1);
+		pixman_transform_translate(&transform, NULL, fh, 0);
+		break;
+	case WL_OUTPUT_TRANSFORM_180:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_180:
+		pixman_transform_rotate(&transform, NULL, -pixman_fixed_1, 0);
+		pixman_transform_translate(&transform, NULL, fw, fh);
+		break;
+	case WL_OUTPUT_TRANSFORM_270:
+	case WL_OUTPUT_TRANSFORM_FLIPPED_270:
+		pixman_transform_rotate(&transform, NULL, 0, -pixman_fixed_1);
+		pixman_transform_translate(&transform, NULL, 0, fw);
+		break;
 	}
 
-	if (dst_height <= 0)
-		return;
+	pixman_transform_scale(&transform, NULL,
+			       pixman_double_to_fixed(vp->buffer.scale),
+			       pixman_double_to_fixed(vp->buffer.scale));
 
-	over = dst_x + dst_width - output->width;
-	if (over > 0) {
-		t = (int64_t)over * src_width / dst_width;
-		src_width -= t;
-		dst_width -= over;
-	}
+	/*
+	 * at this point, we should have a transformation for the source.
+	 * However what we really need is not a transformation. We need
+	 * is a source region.
+	 */
 
-	if (dst_width <= 0)
-		return;
+	bbox = pixman_region32_extents(&final_region);
+	q1.vector[0] = pixman_int_to_fixed(bbox->x1);
+	q1.vector[1] = pixman_int_to_fixed(bbox->y1);
+	q1.vector[2] = pixman_int_to_fixed(1);
+
+	q2.vector[0] = pixman_int_to_fixed(bbox->x2);
+	q2.vector[1] = pixman_int_to_fixed(bbox->y2);
+	q2.vector[2] = pixman_int_to_fixed(1);
 
-	over = dst_y + dst_height - output->height;
-	if (over > 0) {
-		t = (int64_t)over * src_height / dst_height;
-		src_height -= t;
-		dst_height -= over;
+	DBG("bbox: (%d,%d)-(%d,%d)\n", bbox->x1, bbox->y1, bbox->x2, bbox->y2);
+	DBG("q1: (%d,%d,%d)\n", pixman_fixed_to_int(q1.vector[0]), pixman_fixed_to_int(q1.vector[1]), pixman_fixed_to_int(q1.vector[2]));
+	DBG("q2: (%d,%d,%d)\n", pixman_fixed_to_int(q2.vector[0]), pixman_fixed_to_int(q2.vector[1]), pixman_fixed_to_int(q2.vector[2]));
+
+	DBG("transform: (%d,%d,%d)(%d,%d,%d)(%d,%d,%d)\n",
+	    pixman_fixed_to_int(transform.matrix[0][0]), pixman_fixed_to_int(transform.matrix[1][0]), pixman_fixed_to_int(transform.matrix[2][0]),
+	    pixman_fixed_to_int(transform.matrix[0][1]), pixman_fixed_to_int(transform.matrix[1][1]), pixman_fixed_to_int(transform.matrix[2][1]),
+	    pixman_fixed_to_int(transform.matrix[0][2]), pixman_fixed_to_int(transform.matrix[1][2]), pixman_fixed_to_int(transform.matrix[2][2])
+	);
+
+	pixman_transform_point(&transform, &q1);
+	pixman_transform_point(&transform, &q2);
+
+	DBG("q1': (%d,%d,%d)\n", pixman_fixed_to_int(q1.vector[0]), pixman_fixed_to_int(q1.vector[1]), pixman_fixed_to_int(q1.vector[2]));
+	DBG("q2': (%d,%d,%d)\n", pixman_fixed_to_int(q2.vector[0]), pixman_fixed_to_int(q2.vector[1]), pixman_fixed_to_int(q2.vector[2]));
+
+	if (q1.vector[0] < q2.vector[0]) {
+		src_x = pixman_fixed_to_int(q1.vector[0]);
+		src_width = pixman_fixed_to_int(q2.vector[0] - q1.vector[0]);
+	} else {
+		src_x = pixman_fixed_to_int(q2.vector[0]);
+		src_width = pixman_fixed_to_int(q1.vector[0] - q2.vector[0]);
 	}
 
-	if (dst_height <= 0)
-		return;
+	if (q1.vector[1] < q2.vector[1]) {
+		src_y = pixman_fixed_to_int(q1.vector[1]);
+		src_height = pixman_fixed_to_int(q2.vector[1] - q1.vector[1]);
+	} else {
+		src_y = pixman_fixed_to_int(q2.vector[1]);
+		src_height = pixman_fixed_to_int(q1.vector[1] - q2.vector[1]);
+	}
+
+	dst_x = bbox->x1;
+	dst_y = bbox->y1;
+	dst_width = bbox->x2 - bbox->x1;
+	dst_height = bbox->y2 - bbox->y1;
 
+	/* compose v4l2_surface_state */
 	vs->src_rect.width = src_width;
 	vs->src_rect.height = src_height;
 	vs->src_rect.top = src_y;
@@ -493,6 +638,87 @@ draw_view(struct weston_view *ev, struct weston_output *output,
 	    dst_width, dst_height, dst_x, dst_y);
 
 	device_interface->draw_view(renderer->device, vs);
+
+	pixman_region32_fini(&final_region);
+}
+
+static void
+draw_view(struct weston_view *ev, struct weston_output *output,
+	  pixman_region32_t *damage) /* in global coordinates */
+{
+	struct v4l2_surface_state *vs = get_surface_state(ev->surface);
+	/* repaint bounding region in global coordinates: */
+	pixman_region32_t repaint;
+	/* non-opaque region in surface coordinates: */
+	pixman_region32_t surface_blend;
+	pixman_box32_t *region;
+
+	/*
+	 * Check if the surface is still valid. OpenGL/ES apps may destroy
+	 * buffers before they destroy a surface. This check works in the
+	 * serialized world only.
+	 */
+	if (fcntl(vs->planes[0].dmafd, F_GETFD) < 0)
+		return;
+
+	pixman_region32_init(&repaint);
+	pixman_region32_intersect(&repaint,
+				  &ev->transform.boundingbox, damage);
+
+	if (!pixman_region32_not_empty(&repaint))
+		goto out;
+
+	if (output->zoom.active) {
+		weston_log("v4l2 renderer does not support zoom\n");
+		goto out;
+	}
+
+#if 1
+	{
+		pixman_box32_t *b;
+
+		DBG("%s: for dmafd=%d\n", __func__, vs->planes[0].dmafd);
+
+		b = pixman_region32_extents(&repaint);
+		DBG("%s: repaint: (%d,%d)-(%d,%d)\n", __func__, b->x1, b->y1, b->x2, b->y2);
+
+		b = pixman_region32_extents(damage);
+		DBG("%s: damage: (%d,%d)-(%d,%d)\n", __func__, b->x1, b->y1, b->x2, b->y2);
+
+		b = pixman_region32_extents(&ev->clip);
+		DBG("%s: clip: (%d,%d)-(%d,%d)\n", __func__, b->x1, b->y1, b->x2, b->y2);
+	}
+	repaint_region(ev, output, &repaint, NULL, PIXMAN_OP_OVER);
+#else
+	if (ev->alpha != 1.0 ||
+	    (ev->transform.enabled &&
+	     ev->transform.matrix.type != WESTON_MATRIX_TRANSFORM_TRANSLATE)) {
+		repaint_region(ev, output, &repaint, NULL, PIXMAN_OP_OVER);
+	} else {
+		/* blended region is whole surface minus opaque region: */
+		pixman_region32_init_rect(&surface_blend, 0, 0,
+					  ev->surface->width, ev->surface->height);
+		pixman_region32_subtract(&surface_blend, &surface_blend, &ev->surface->opaque);
+
+		/*
+		 * We assume renderer devices can compose only a single rectangular region.
+		 * Therefore, we shall compose a none-opaque region first, including an opaque
+		 * region, and then compose the opaque region on top of it.
+		 */
+		if (pixman_region32_not_empty(&surface_blend)) {
+			repaint_region(ev, output, &repaint, &surface_blend, PIXMAN_OP_OVER);
+		}
+
+		/* now the opaque region */
+		if (pixman_region32_not_empty(&ev->surface->opaque)) {
+			repaint_region(ev, output, &repaint, &ev->surface->opaque, PIXMAN_OP_SRC);
+		}
+		pixman_region32_fini(&surface_blend);
+	}
+#endif
+
+out:
+	pixman_region32_fini(&repaint);
 }
 
 static void
@@ -508,7 +734,7 @@ repaint_surfaces(struct weston_output *output, pixman_region32_t *damage)
 	// for all views in the primary plane
 	wl_list_for_each_reverse(view, &compositor->view_list, link)
 		if (view->plane == &compositor->primary_plane)
-			draw_view(view, output, damage);
+			draw_view(view, output, &output->region);
 
 	device_interface->finish_compose(renderer->device);
 }
-- 
1.7.9.5

