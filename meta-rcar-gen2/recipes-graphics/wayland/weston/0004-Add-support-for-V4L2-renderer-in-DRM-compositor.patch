From bc9e088d7f4b4d9a3804e409fea50634652f76f2 Mon Sep 17 00:00:00 2001
From: Takanari Hayama <taki@igel.co.jp>
Date: Thu, 14 Aug 2014 18:09:57 +0900
Subject: [PATCH 04/22] Add support for V4L2 renderer in DRM compositor.

When weston is launched with a --use-v4l2 option, the DRM
compositor uses V4L2 renderer.
---
 src/compositor-drm.c |  125 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 125 insertions(+)

diff --git a/src/compositor-drm.c b/src/compositor-drm.c
index 7d514e4..eaddea7 100644
--- a/src/compositor-drm.c
+++ b/src/compositor-drm.c
@@ -47,6 +47,7 @@
 #include "compositor.h"
 #include "gl-renderer.h"
 #include "pixman-renderer.h"
+#include "v4l2-renderer.h"
 #include "udev-input.h"
 #include "launcher-util.h"
 #include "vaapi-recorder.h"
@@ -104,6 +105,8 @@ struct drm_compositor {
 
 	int use_pixman;
 
+	int use_v4l2;
+
 	uint32_t prev_state;
 
 	clockid_t clock;
@@ -121,6 +124,7 @@ struct drm_fb {
 	struct drm_output *output;
 	uint32_t fb_id, stride, handle, size;
 	int fd;
+	int dmafd;
 	int is_client_buffer;
 	struct weston_buffer_reference buffer_ref;
 
@@ -200,10 +204,12 @@ struct drm_parameters {
 	int connector;
 	int tty;
 	int use_pixman;
+	int use_v4l2;
 	const char *seat_id;
 };
 
 static struct gl_renderer_interface *gl_renderer;
+static struct v4l2_renderer_interface *v4l2_renderer;
 
 static const char default_seat[] = "seat0";
 
@@ -287,8 +293,17 @@ drm_fb_create_dumb(struct drm_compositor *ec, unsigned width, unsigned height)
 	if (fb->map == MAP_FAILED)
 		goto err_add_fb;
 
+	if (ec->use_v4l2) {
+		ret = drmPrimeHandleToFD(ec->drm.fd, fb->handle, DRM_CLOEXEC,
+					 &fb->dmafd);
+		if (ret)
+			goto err_export_handle;
+	}
+
 	return fb;
 
+err_export_handle:
+	munmap(fb->map, fb->size);
 err_add_fb:
 	drmModeRmFB(ec->drm.fd, fb->fb_id);
 err_bo:
@@ -542,6 +557,32 @@ drm_output_render_pixman(struct drm_output *output, pixman_region32_t *damage)
 }
 
 static void
+drm_output_render_v4l2(struct drm_output *output, pixman_region32_t *damage)
+{
+	struct weston_compositor *ec = output->base.compositor;
+	pixman_region32_t total_damage, previous_damage;
+
+	pixman_region32_init(&total_damage);
+	pixman_region32_init(&previous_damage);
+
+	pixman_region32_copy(&previous_damage, damage);
+
+	pixman_region32_union(&total_damage, damage, &output->previous_damage);
+	pixman_region32_copy(&output->previous_damage, &previous_damage);
+
+	output->current_image ^= 1;
+
+	output->next = output->dumb[output->current_image];
+	v4l2_renderer->set_output_buffer(&output->base,
+					 output->dumb[output->current_image]->dmafd);
+
+	ec->renderer->repaint_output(&output->base, &total_damage);
+
+	pixman_region32_fini(&total_damage);
+	pixman_region32_fini(&previous_damage);
+}
+
+static void
 drm_output_render(struct drm_output *output, pixman_region32_t *damage)
 {
 	struct drm_compositor *c =
@@ -549,6 +590,8 @@ drm_output_render(struct drm_output *output, pixman_region32_t *damage)
 
 	if (c->use_pixman)
 		drm_output_render_pixman(output, damage);
+	else if (c->use_v4l2)
+		drm_output_render_v4l2(output, damage);
 	else
 		drm_output_render_gl(output, damage);
 
@@ -1111,6 +1154,9 @@ static void
 drm_output_fini_pixman(struct drm_output *output);
 
 static void
+drm_output_fini_v4l2(struct drm_output *output);
+
+static void
 drm_output_destroy(struct weston_output *output_base)
 {
 	struct drm_output *output = (struct drm_output *) output_base;
@@ -1143,6 +1189,8 @@ drm_output_destroy(struct weston_output *output_base)
 
 	if (c->use_pixman) {
 		drm_output_fini_pixman(output);
+	} else if (c->use_v4l2) {
+		drm_output_fini_v4l2(output);
 	} else {
 		gl_renderer->output_destroy(output_base);
 		gbm_surface_destroy(output->surface);
@@ -1185,6 +1233,8 @@ static int
 drm_output_init_egl(struct drm_output *output, struct drm_compositor *ec);
 static int
 drm_output_init_pixman(struct drm_output *output, struct drm_compositor *c);
+static int
+drm_output_init_v4l2(struct drm_output *output, struct drm_compositor *c);
 
 static int
 drm_output_switch_mode(struct weston_output *output_base, struct weston_mode *mode)
@@ -1233,6 +1283,13 @@ drm_output_switch_mode(struct weston_output *output_base, struct weston_mode *mo
 				   "new mode\n");
 			return -1;
 		}
+	} else if (ec->use_v4l2) {
+		drm_output_fini_v4l2(output);
+		if (drm_output_init_v4l2(output, ec) < 0) {
+			weston_log("failed to init output v4l2 state with "
+				   "new mode\n");
+			return -1;
+		}
 	} else {
 		gl_renderer->output_destroy(&output->base);
 		gbm_surface_destroy(output->surface);
@@ -1357,6 +1414,17 @@ init_pixman(struct drm_compositor *ec)
 	return pixman_renderer_init(&ec->base);
 }
 
+static int
+init_v4l2(struct drm_compositor *ec)
+{
+	v4l2_renderer = weston_load_module("v4l2-renderer.so",
+					   "v4l2_renderer_interface");
+	if (!v4l2_renderer)
+		return -1;
+
+	return v4l2_renderer->init(&ec->base, ec->drm.fd, ec->drm.filename);
+}
+
 static struct drm_mode *
 drm_output_add_mode(struct drm_output *output, drmModeModeInfo *info)
 {
@@ -1633,6 +1701,51 @@ drm_output_fini_pixman(struct drm_output *output)
 	}
 }
 
+static int
+drm_output_init_v4l2(struct drm_output *output, struct drm_compositor *c)
+{
+	int w = output->base.current_mode->width;
+	int h = output->base.current_mode->height;
+	unsigned int i;
+
+	for (i = 0; i < ARRAY_LENGTH(output->dumb); i++) {
+		output->dumb[i] = drm_fb_create_dumb(c, w, h);
+		if (!output->dumb[i])
+			goto err;
+	}
+
+	if (v4l2_renderer->output_create(&output->base) < 0)
+		goto err;
+
+	pixman_region32_init_rect(&output->previous_damage,
+				  output->base.x, output->base.y, output->base.width, output->base.height);
+
+	return 0;
+
+err:
+	for (i = 0; i < ARRAY_LENGTH(output->dumb); i++) {
+		if (output->dumb[i])
+			drm_fb_destroy_dumb(output->dumb[i]);
+
+		output->dumb[i] = NULL;
+	}
+
+	return -1;
+}
+
+static void
+drm_output_fini_v4l2(struct drm_output *output)
+{
+	unsigned int i;
+
+	v4l2_renderer->output_destroy(&output->base);
+
+	for (i = 0; i < ARRAY_LENGTH(output->dumb); i++) {
+		drm_fb_destroy_dumb(output->dumb[i]);
+		output->dumb[i] = NULL;
+	}
+}
+
 static void
 edid_parse_string(const uint8_t *data, char text[])
 {
@@ -2059,6 +2172,11 @@ create_output_for_connector(struct drm_compositor *ec,
 			weston_log("Failed to init output pixman state\n");
 			goto err_output;
 		}
+	} else if (ec->use_v4l2) {
+		if (drm_output_init_v4l2(output, ec) < 0) {
+			weston_log("Failed to init output v4l2 state\n");
+			goto err_output;
+		}
 	} else if (drm_output_init_egl(output, ec) < 0) {
 		weston_log("Failed to init output gl state\n");
 		goto err_output;
@@ -2740,6 +2858,7 @@ drm_compositor_create(struct wl_display *display,
 		goto err_base;
 
 	ec->use_pixman = param->use_pixman;
+	ec->use_v4l2 = param->use_v4l2;
 
 	if (weston_compositor_init(&ec->base, display, argc, argv,
 				   config) < 0) {
@@ -2783,6 +2902,11 @@ drm_compositor_create(struct wl_display *display,
 			weston_log("failed to initialize pixman renderer\n");
 			goto err_udev_dev;
 		}
+	} else if (ec->use_v4l2) {
+		if (init_v4l2(ec) < 0) {
+			weston_log("failed to initialize v4l2 renderer\n");
+			goto err_udev_dev;
+		}
 	} else {
 		if (init_egl(ec) < 0) {
 			weston_log("failed to initialize egl\n");
@@ -2894,6 +3018,7 @@ backend_init(struct wl_display *display, int *argc, char *argv[],
 		{ WESTON_OPTION_INTEGER, "tty", 0, &param.tty },
 		{ WESTON_OPTION_BOOLEAN, "current-mode", 0, &option_current_mode },
 		{ WESTON_OPTION_BOOLEAN, "use-pixman", 0, &param.use_pixman },
+		{ WESTON_OPTION_BOOLEAN, "use-v4l2", 0, &param.use_v4l2 },
 	};
 
 	param.seat_id = default_seat;
-- 
1.7.9.5

