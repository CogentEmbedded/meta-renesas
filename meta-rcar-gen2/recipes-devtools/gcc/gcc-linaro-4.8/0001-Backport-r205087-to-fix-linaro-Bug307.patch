From 95ea922d0e0257b2eac67f5f4be7e828e9491c3b Mon Sep 17 00:00:00 2001
From: Petr Nechaev <petr.nechaev@cogentembedded.com>
Date: Fri, 16 Jan 2015 15:47:45 +0300
Subject: [PATCH] Backport r205087 to fix linaro Bug307

Venkataramanan Kumar 2014-08-28 06:02:48 UTC
The ICE is due to invalid memory RTX used for generating ld_rd/st_rd in
DI mode. The patch at r308507 in trunk does some memory RTX validation
before allowing them as operands for ld_rd/st_rd.

Fixed by backporting r205807
See https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=214617
---
 gcc/config/arm/arm.c | 35 ++++++++++++++++++++++-------------
 1 file changed, 22 insertions(+), 13 deletions(-)

diff --git a/gcc/config/arm/arm.c b/gcc/config/arm/arm.c
index 08dc2d6..d2a4b4e 100644
--- a/gcc/config/arm/arm.c
+++ b/gcc/config/arm/arm.c
@@ -12897,28 +12897,37 @@ operands_ok_ldrd_strd (rtx rt, rtx rt2, rtx rn, HOST_WIDE_INT offset,
 }
 
 /* Helper for gen_operands_ldrd_strd.  Returns true iff the memory
-   operand ADDR is an immediate offset from the base register and is
-   not volatile, in which case it sets BASE and OFFSET
-   accordingly.  */
-bool
-mem_ok_for_ldrd_strd (rtx addr, rtx *base, rtx *offset)
+   operand MEM's address contains an immediate offset from the base
+   register and has no side effects, in which case it sets BASE and
+   OFFSET accordingly.  */
+static bool
+mem_ok_for_ldrd_strd (rtx mem, rtx *base, rtx *offset)
 {
+  rtx addr;
+
+  gcc_assert (base != NULL && offset != NULL);
+
   /* TODO: Handle more general memory operand patterns, such as
      PRE_DEC and PRE_INC.  */
 
-  /* Convert a subreg of mem into mem itself.  */
-  if (GET_CODE (addr) == SUBREG)
-    addr = alter_subreg (&addr, true);
-
-  gcc_assert (MEM_P (addr));
+  if (side_effects_p (mem))
+    return false;
 
-  /* Don't modify volatile memory accesses.  */
-  if (MEM_VOLATILE_P (addr))
+  /* Can't deal with subregs.  */
+  if (GET_CODE (mem) == SUBREG)
     return false;
 
+  gcc_assert (MEM_P (mem));
+
   *offset = const0_rtx;
 
-  addr = XEXP (addr, 0);
+  addr = XEXP (mem, 0);
+
+  /* If addr isn't valid for DImode, then we can't handle it.  */
+  if (!arm_legitimate_address_p (DImode, addr,
+				 reload_in_progress || reload_completed))
+    return false;
+
   if (REG_P (addr))
     {
       *base = addr;
-- 
1.9.3

